
        <html>
            <head>
                <title>webdev - RobKohr's Blog</title>

<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-600316-3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag() {
    dataLayer.push(arguments);
  }
  gtag("js", new Date());

  gtag("config", "UA-600316-3");
</script>

<link rel="alternate" type="application/rss+xml" title="RobKohr's Blog" href="rss.xml" />
<link rel="shortcut icon" type="image/ico" href="favicon.ico">
<link rel="stylesheet" href="libs/highlight/styles/dark.min.css">
<script src="libs/highlight/highlight.min.js"></script>

                <link rel="stylesheet" href="../neat.css">
                <base href="../">
            </head>
            <body>
            <a href="./index.html">Home</a>
            <h2>Tag: webdev</h2>
    
    <h2><a href="articles/getting-a-little-torn-between-svelte-and-solidjs">Getting a little torn between svelte and SolidJS</a></h2>
    <div class="variables">
    <div class="date">@date=2023-03-09</div>
    <div class="tags">@tags=<a href="tags/webdev">webdev</a></div>
    </div>
    <article>
        <p>I have been playing with svelte, and liking it, but things just seem to mysterious. With SolidJS, I know what to expect.</p>
<p>I got to creating some input components with svelte and started to do a registration form. Going to try again with SolidJS to build the same thing. Let&#39;s see if it goes a little better.</p>

    </article>
    
    <h2><a href="articles/on-typescript">On typescript</a></h2>
    <div class="variables">
    <div class="date">@date=2021-08-15</div>
    <div class="tags">@tags=<a href="tags/typescript">typescript</a>, <a href="tags/webdev">webdev</a></div>
    </div>
    <article>
        <p><img src="images/2021-08-15-11-32-29.png" alt="2021-08-15-11-32-29.png" style="max-width: 100%;" /></p>
<p>After working with typescript a lot on work projects, I typically skip it on personal projects as it just seems tedious at times.</p>
<p>Well, I just threw it into the neverall project while working on an alerting system, and by golly did it help clean up some things.</p>
<p>The issues I find are related to the type &quot;any&quot;, which seems like sacrilege to use in projects, and for good reason. In a big team, it is easy for an individual contributor to fly under the radar tossing any in all sorts of places.</p>
<p>The flip side of it is that the ROI on sorting out some type stuff is just not worth the effort. Yep, it might come bite you in the ass, but sometimes mitigating the risk just takes too long, and for personal projects, the in between of sometimes using any when you don&#39;t really care is nice.</p>
<p>Throw in other devs though, and banning &quot;any&quot; starts to look real attractive.</p>

    </article>
    
    <h2><a href="articles/bringing-things-under-one-roof">Bringing things under one roof</a></h2>
    <div class="variables">
    <div class="date">@date=2020-10-20</div>
    <div class="tags">@tags=<a href="tags/webdev">webdev</a>, <a href="tags/seo">seo</a></div>
    </div>
    <article>
        <p>This is a great article about using subdomains vs subfolders for seo:</p>
<p><a href="https://www.seoquake.com/blog/subdomains-vs-subfolders/">subdomains vs subfolders</a></p>
<p>I looks pretty clear that subfolders are the way to go.</p>
<p>With a single server with nginx on it, you can reverse proxy to multiple servers using the location /somedirectory tag.</p>
<p>I am pondering the idea of making a bunch of mini apps, and then having them all under one domain (maybe this one) and then using subdirectories rather than creating separate names domains for everything. As of right now, this site is just me talking to myself as viewership is basically nil.</p>
<p>As I am coming back to working on instaboardgame, maybe it should be under tentoncreations.com/fun/boardgame. Cueflash.com could go under tentoncreations.com/flashcards. Constantsail.com could go under tentoncreations/fun/constantsail.</p>
<p>Editthis.info/create_your_own_adventure -&gt; tentoncreations.com/wiki/create_your_own_adventure</p>
<p>and so on.</p>
<p>I might not want to do that with editthis.info as the content on there can be adult in nature, and would make it so google adsense wouldn&#39;t be allowed on the other sites.</p>
<p>This blog could end up going under /blog, or just stay at the root.</p>
<p>I was also messing around with <a href="https://wordoid.com/">wordoid</a> trying to come up with something shorter than TenTonCreations.com. It is a tough call as that is a pretty long domain name, but it is easy to spell, and I think sounds pretty cool. It also makes more sense then undrix.com or lagon.com (two examples of available domain names). The choices between short and meaningful is a tough one with domain names.</p>
<p>Some sites I am thinking would be good to build: a site for feedback.</p>

    </article>
    
    <h2><a href="articles/fontello---icon-fonts-generator">Fontello - icon fonts generator</a></h2>
    <div class="variables">
    <div class="date">@date=2015-02-06</div>
    <div class="tags">@tags=<a href="tags/webdev">webdev</a></div>
    </div>
    <article>
        <p>This is so cool! You can take and mesh together icons from different font sets along with svg images and define the names of the icons however you like.</p>
<p>This is the most awesome way to make an icon set for your website!</p>
<p>With this you can scale things as you like, and make icons any color you like!
<a href="http://fontello.com">Fontello - icon fonts generator</a></p>

    </article>
    
    <h2><a href="articles/digital-ocean">Digital Ocean</a></h2>
    <div class="variables">
    <div class="date">@date=2014-06-16</div>
    <div class="tags">@tags=<a href="tags/webdev">webdev</a></div>
    </div>
    <article>
        <p>Loving DigitalOcean.com vps. Only $5 a month for a base one, but if you are using it for development, you can snapshot it and shut it down, and only pay a few cents for the hours you had it running.   </p>
<p>Basically I treat snapshoting and shutting down like putting away my toys for playing with later. Eventually when the service is finished I just will keep it running :)</p>

    </article>
    
    <h2><a href="articles/i-used-to-work-in-e-commerce--and-one-term-you-might-not-heard-of-is-called-a---">I used to work in e-commerce, and one term you might not heard of is called a...</a></h2>
    <div class="variables">
    <div class="date">@date=2014-01-17</div>
    <div class="tags">@tags=<a href="tags/webdev">webdev</a></div>
    </div>
    <article>
        <p>I used to work in e-commerce, and one term you might not heard of is called an &quot;abandoned cart.&quot; It is when a user is about to check out, but then leaves the site. This happens frequently, and many savvy e-commerce sites try to recover these abandoned carts.</p>
<p>If you got through much of the process including entering your email address, and abandon, the e-commerce site might send you an email within 24 hours to recover your cart and get some discount on checkout. This happens a lot on fashion and luxury purchase websites which have big markups from their production costs, and thus they can shave off a sizable percentage and still make a profit. </p>
<p>So if you are on such a website, go through to the last page of checkout, and leave. Check your email (and your spam folder the next day) and you might have a surprise waiting for you.</p>

    </article>
    
    <h2><a href="articles/no-database-for-node-js">No database for node.js</a></h2>
    <div class="variables">
    <div class="date">@date=2013-08-15</div>
    <div class="tags">@tags=<a href="tags/webdev">webdev</a></div>
    </div>
    <article>
        <p>So I have been using node.js and mongo for some time, and yeah, it works fine and all, but I am starting to wonder, why bother with a db at all?</p>
<p>When you are using PHP each load of a page restarts the PHP app, and the only way you can have any state stored for anything is to use some database system.</p>
<p>This is not the case with node.js. With that, connections just keep coming into your app, and you can maintain a set of variables for all of the information: user data, friendships, messages, etc, and you could keep it in memory. Yes you have to think carefully about this as you could go too far with data retention and your app would have to start swapping, but you would remove a whole layer of complexity to your app. </p>
<p>What about when the app shuts down? Well all will be lost, but lets say you keep an object around called datastore, and that held all of your important data. It could periodically write its content to a json file which would be loaded on startup. Or you could just have a file for your users, messages, etc, so that each are treated separately. This might make them a little more manageable. You could throw in versioning, and you could also write to a temp file which would then me moved to replace the old one in case your app crashes during the write phase. </p>
<p>Now you only have one process, the app, and it doesn’t need to connect or depend on anything. You can do your own quering/indexing of in memory data, and your data is just stored in human readable and easily backed up text files.</p>

    </article>
    
            </body>
        </html>
    