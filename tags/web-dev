
        <html>
            <head>
                <title>RobKohr's Blog - web-dev</title>
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-600316-3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag() {
    dataLayer.push(arguments);
  }
  gtag("js", new Date());

  gtag("config", "UA-600316-3");
</script>

                <link rel="stylesheet" href="../neat.css">
                <base href="../">
            </head>
            <body>
            <a href="./index.html">Home</a>
            <h2>Tag: web-dev</h2>
    
    <h2><a href="articles/one-codebase-to-rule-them-all">One codebase to rule them all</a></h2>
    <div id="date">@date=2021-05-25</div>
    <div id="tags">@tags=<a href="tags/web-dev">web-dev</a>, <a href="tags/react">react</a>, <a href="tags/seo">seo</a>, <a href="tags/adhd">adhd</a></div>
    <article>
        <p>A little over a decade ago, I went on a binge and made a bunch of web apps of various sorts:</p>
<ul>
<li><a href="http://editthis.info">EditThis.info wiki hosting</a></li>
<li><a href="http://cueflash.com">Cueflash flashcards study system</a></li>
<li><a href="http://constantsail.com">ConstantSail pirate and trading game</a></li>
<li>And atari combat and astroids clones</li>
<li>A dice rolling program</li>
</ul>
<p>Since then, I have built up a huge list of projects I would like to build, I get started on some of them, but then fail to get them off the ground.</p>
<p>Issues that I blame on this:</p>
<ul>
<li>I also had a messy divorce and custody struggle that for a good 6 years encompassed all of my attention (and a good chunk of $money), making it pretty impossible to focus on anything else, and really got me out of my routine for doing side projects</li>
<li>Being overcommitted to work</li>
<li><a href="https://www.forbes.com/sites/davidsturt/2015/06/11/decision-paralysis-why-its-prevalent-and-3-ways-to-end-it/?sh=1ad1dd1735b2">decision paralysis</a> - that big list of ideas is so big it has it&#39;s own organization structure. Settling down with one idea is really challenging<ul>
<li>I am ADD as all hell (like 100% on most tests)... hence the giant list of ideas</li>
</ul>
</li>
<li>The startup to any project involves too much overhead to keep me involved.
Ok, I am working my normal job, and I am creating a new project: creating the css, the layout, the database, the authentication system, the different pages, etc, and by the time I get to the meat of what makes something unique, I am on to the next project.</li>
</ul>
<p>The first of these bullets is &quot;resolved&quot;, the middle ones aren&#39;t really resolvable, but that last one, I think that is tackle-able, and able to be handled with my scattered mind.</p>
<p>So I created a website called <a href="http://neverall.com">neverall.com</a> (the domain name was from a <a href="http://mixmatch.com">domain name generator</a> I created called mixmatch.com that helps you find short domain names). I also created a single create-react-app repo for neverall.com, and am using it for a rebuild of the <a href="http://godotassetstore.org">godot asset store</a>. Instead of creating a bunch of domain names and a bunch of git repos and separate projects, I am going to build one site to rule them all, and everything will just be basically a &quot;subdirectory&quot; of neverall.com. This will have a few benefits:</p>
<ul>
<li>All of the basic site setup stuff will always be there, so it will be easy to just create a new directory and use the same common db for all of them</li>
<li>Improvements to the design and components can be done all in one place, and so everything gets a face lift (though I do like individual projects to have their own look and feel)</li>
<li>A little SEO hacking as projects on different domain names don&#39;t share page rank, so my projects don&#39;t really help eachother out much, except for interlinking.</li>
</ul>
<p>This last point is an interesting one, as it is nice to tell people, check out someCoolWebApp.com instead of neverall.com/someCoolWebApp.</p>
<p>The thing is, both are things that can be done at the same time. Using nginx, I can point all of the domain names to the same code base, but when you go to someCoolWebApp.com, it will show you the same content as neverall.com/someCoolWebApp, and this can all be handled in the React router code (I use reach router, which is awesome).</p>
<p>Now, duplicate content on the internet is a big SEO no-no, and google will ding you hard for it. Also, all that SEO juice flowing to someCoolWebApp.com doesn&#39;t benefit the collections of other apps that I am building. ... except it can!</p>
<p><a href="https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls">Canonical URLs</a> are things you can put in the head of your site documents. They tell google where the &quot;real&quot; original content is, and so that real content gets the SEO page ranking rather than wherever people are linking to. So I can tell everyone all about someCoolWebApp.com, and they can all be lining to it, but really neverall.com/someCoolWebApp.com gets all the benefits.</p>
<p>Another side benefit is that since everything is in one repo, I can bounce around between directories, reuse components, and work on whatever I feel tickles my fancy any day without having to decide what repo to work on and just being stuck on that. I can start writing code anywhere for anything and it will be useable without needing to start up much or even finish anything at any time.</p>
<p>All in all, an experiment into ADD programmer side project productivity. Maybe I will update you here on the progress... or maybe I will just be creating things.</p>

    </article>
    
    <h2><a href="articles/easy-instant-github-branch-deployment">Easy instant github branch deployment</a></h2>
    <div id="date">@date=2021-04-23</div>
    <div id="tags">@tags=<a href="tags/servers">servers</a>, <a href="tags/web-dev">web-dev</a>, <a href="tags/react">react</a></div>
    <article>
        <p>Want to have your server update itself whenever you deploy to a github branch? Piece of cake:</p>
<p><a href="https://github.com/RobKohr/github-hook-handler">https://github.com/RobKohr/github-hook-handler</a></p>

    </article>
    
    <h2><a href="articles/thoughts-on-using-grommet-for-web-app-design">Thoughts on using grommet for web app design</a></h2>
    <div id="date">@date=2020-10-08</div>
    <div id="tags">@tags=<a href="tags/web-dev">web-dev</a>, <a href="tags/design">design</a>, <a href="tags/react">react</a></div>
    <article>
        <p>I used <a href="https://icons.grommet.io/">Grommet</a> for a react project, and here are some of my thoughts on it.</p>
<p>Things I like</p>
<ul>
<li>Works out of the box for most use cases</li>
<li>Nice for form elements</li>
<li>Gives a standard look and feel for the site without any need to work out details</li>
</ul>
<p>Things I don&#39;t like</p>
<ul>
<li>A grommet element is a wrapper for an entire dom structure that you can&#39;t directly style as it doesn&#39;t have any classes you can apply css to; a simple parent classname that you can have as a starting point would work wonders</li>
<li>The Box wrapper and other wrappers for grid layouts just reimplement html features but in a more limited and difficult to adjust way</li>
<li>It basically sucks for doing anything new stylistically (such as building a static landing page).</li>
<li>It&#39;s design is kinda bla and minimal as far as customization</li>
</ul>
<p>If I were to do a application in the future I would:</p>
<ul>
<li>I&#39;d still use grommet for all of its components, but not it&#39;s layout</li>
<li>Create a thin layer interface over grommet that just passes down props. This way a mvp can be quickly pushable, but the styles would be easily updatable<ul>
<li>But more likely, unless styles don&#39;t matter at all, I would just do my own component library based on mocks as really stying components isn&#39;t too hard</li>
</ul>
</li>
</ul>
<p>Well structured scss is really easy to manage, and while grommet is good for building quick and dirty UI, scss custom built ui components are better to build for a project that is going to be something that will be used for a long term project.</p>

    </article>
    
    <h2><a href="articles/next-js-vs-create-react-app">Next.js vs Create-React-App</a></h2>
    <div id="date">@date=2020-10-08</div>
    <div id="tags">@tags=<a href="tags/web-dev">web-dev</a>, <a href="tags/react">react</a></div>
    <article>
        <p>When doing react, I have on worked with CRA up until now. I just took over a next.js app, and when built and deployed, it is speedy, but didn&#39;t like some of the details of development:</p>
<ul>
<li>myApp/pages/page-name/index.js is how you create a route for /page-name. While quick and friendly, I prefer the following:<ul>
<li>Defining my own route rules in details with reach-router. I am just to particular about routing to accept the trade off of simplicity against customizability. Also, defining routes is simple, and it is good for rearranging things without renaming components.</li>
<li>I really don&#39;t like dozens of index.js files in my codebase. I prefer to call pages pages/page-name/page-name.js so it is clear by the file name what things are for.</li>
</ul>
</li>
<li>making changes when development are a little fluky when it comes to live updates, css doesn&#39;t seem to live update nicely, and there are just too many times that I have to kill the server and restart it to see my changes. This is even worse because it all seems unpredictable as to if/when changes would appear and a little frustrating</li>
</ul>
<p>These are little nitpicks, and if CRA didn&#39;t exist, I would go with next, but I love the way CRA is more customizable regarding routing, and is just snappy for responsiveness. I also feel there is just too much gray area as to if something is being rendered on the server or the client, and as an ex-apache/php guy, I really am not a fan of worrying about server side rendering anymore.</p>
<p>The case where I would likely use next would be if I were building a static content based site where SEO and first page load times were everything. I also know gatsby is supposed to be good for this too, so I would do some side by side comparisons. Also SEO with react is pretty good as is.</p>
<p>In the end though, that isn&#39;t really something I do much of, so I&#39;ll be on CRA for the forseeable future.</p>

    </article>
    
            </body>
        </html>
    